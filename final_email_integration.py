"""
Complete Email Integration for Trading System
This script provides a complete solution for:
1. Fixing all Unicode/emoji encoding issues
2. Sending emails for your latest trades  
3. Integrating into your OCR/DeepSeek pipeline
"""

import os
import json
import sys
from datetime import datetime
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail
from dotenv import load_dotenv

# Load environment
load_dotenv()

class TradingEmailer:
    """ASCII-only email sender for trading alerts"""
    
    def __init__(self):
        self.api_key = os.getenv("SENDGRID_API_KEY")
        self.from_email = os.getenv("FROM_EMAIL")
        self.to_email = os.getenv("TO_EMAIL")
        
    def is_configured(self):
        """Check if email is properly configured"""
        return all([self.api_key, self.from_email, self.to_email])
    
    def clean_text(self, text):
        """Remove any non-ASCII characters that could cause encoding issues"""
        if not text:
            return ""
        # Keep only ASCII printable characters
        return ''.join(char for char in str(text) if 32 <= ord(char) <= 126 or char in '\n\r\t')
    
    def send_email(self, subject, content):
        """Send email with ASCII-only content"""
        try:
            if not self.is_configured():
                return {
                    "success": False,
                    "error": "Email not configured. Check SENDGRID_API_KEY, FROM_EMAIL, TO_EMAIL in .env"
                }
            
            # Clean all text to prevent encoding issues
            clean_subject = self.clean_text(subject)
            clean_content = self.clean_text(content)
            
            # Create email
            message = Mail(
                from_email=self.from_email,
                to_emails=self.to_email,
                subject=clean_subject,
                plain_text_content=clean_content
            )
            
            # Send email
            sg = SendGridAPIClient(self.api_key)
            response = sg.send(message)
            
            return {
                "success": True,
                "status_code": response.status_code,
                "message": f"Email sent to {self.to_email}"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    def send_trade_alert(self, trade_data):
        """Send a formatted trade alert email"""
        
        # Extract trade info with safe defaults
        trade_id = trade_data.get('trade_id', 'Unknown')
        ticker = trade_data.get('ticker', 'Unknown')
        direction = trade_data.get('direction', 'Unknown')
        entry_price = trade_data.get('entry_price', 'N/A')
        exit_price = trade_data.get('exit_price', 'N/A')
        pnl = trade_data.get('pnl', 'N/A')
        pnl_amount = trade_data.get('pnl_amount', 0)
        date_time = trade_data.get('date_time', 'Unknown')
        
        # Create subject
        profit_loss = "Profit" if (pnl_amount or 0) > 0 else "Loss"
        subject = f"Trade Alert: {ticker} {direction.title()} Position - {profit_loss} ${abs(pnl_amount or 0)}"
        
        # Create content
        content = f"""
TRADE SUMMARY REPORT
{'=' * 50}

Trade ID: {trade_id}
Ticker: {ticker}
Direction: {direction.upper()}
Entry Price: ${entry_price}
Exit Price: ${exit_price}
P&L: {pnl}
Date/Time: {date_time}

ANALYSIS:
This {direction} trade on {ticker} resulted in a {profit_loss.lower()} of ${abs(pnl_amount or 0)}.
{'Congratulations on the profitable trade!' if (pnl_amount or 0) > 0 else 'Review this trade for improvement opportunities.'}

{'=' * 50}
Generated by Automated Trading System
        """.strip()
        
        return self.send_email(subject, content)
    
    def send_latest_trade_from_log(self, log_file="logs/trade_log.jsonl"):
        """Send email for the most recent trade from the log file"""
        try:
            if not os.path.exists(log_file):
                return {"success": False, "error": f"Trade log not found: {log_file}"}
            
            # Read the last line (most recent trade)
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            if not lines:
                return {"success": False, "error": "No trades found in log"}
            
            # Parse the last trade
            last_trade_json = lines[-1].strip()
            trade_data = json.loads(last_trade_json)
            
            return self.send_trade_alert(trade_data)
            
        except Exception as e:
            return {"success": False, "error": f"Error reading trade log: {str(e)}"}

def send_nq1_trade_email():
    """Send email for the specific NQ1! trade mentioned"""
    emailer = TradingEmailer()
    
    # Your specific NQ1! trade data
    nq1_trade = {
        'trade_id': '1829480a',
        'ticker': 'NQ1!',
        'timeframe': 'Not specified',
        'entry_price': 22880.75,
        'exit_price': 22878.0,
        'direction': 'short',
        'pnl': '+2,220.00 usp',
        'pnl_amount': 2220.0,
        'date_time': '2025-07-08 22:12:32',
        'reason_or_annotations': 'Not specified',
        'image_source': 'NQ1!_2025-07-08_22-12-32_ef2ba.png',
        'logged_at': '2025-07-08T22:25:55.572680',
        'ocr_confidence': '78.9%'
    }
    
    return emailer.send_trade_alert(nq1_trade)

def integrate_with_existing_pipeline():
    """
    Instructions for integrating this with your existing OCR/DeepSeek pipeline
    """
    instructions = """
    INTEGRATION INSTRUCTIONS:
    
    1. In your enhanced_extract_trade.py, replace the email import:
       
       # OLD:
       from sendgrid_client import send_trade_email
       
       # NEW:
       from final_email_integration import TradingEmailer
    
    2. Replace the email sending code:
       
       # OLD:
       email_result = send_trade_email(trade.model_dump(), email_summary)
       
       # NEW:
       emailer = TradingEmailer()
       email_result = emailer.send_trade_alert(trade.model_dump())
    
    3. For auto-triggering after OCR/DeepSeek, add this to the end of process_single_image():
       
       if send_email and EMAIL_ENABLED:
           emailer = TradingEmailer()
           email_result = emailer.send_trade_alert(trade.model_dump())
           result["email_sent"] = email_result.get("success", False)
           result["email_status"] = email_result.get("message", email_result.get("error"))
    
    4. For batch processing, emails will be sent automatically for each trade.
    
    5. To manually send an email for the latest trade:
       python -c "from final_email_integration import send_nq1_trade_email; print(send_nq1_trade_email())"
    """
    return instructions

# Command line interface
if __name__ == "__main__":
    print("[MAIN] Trading Email System")
    print("=" * 40)
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "test":
            # Send test email
            emailer = TradingEmailer()
            result = emailer.send_email(
                "Test Email - Trading System", 
                "This is a test email from your trading system. ASCII only!"
            )
            print(f"Test result: {result}")
            
        elif command == "nq1":
            # Send the specific NQ1! trade email
            result = send_nq1_trade_email()
            print(f"NQ1! trade email result: {result}")
            
        elif command == "latest":
            # Send email for latest trade from log
            emailer = TradingEmailer()
            result = emailer.send_latest_trade_from_log()
            print(f"Latest trade email result: {result}")
            
        elif command == "config":
            # Check configuration
            emailer = TradingEmailer()
            print(f"Email configured: {emailer.is_configured()}")
            print(f"API Key present: {bool(emailer.api_key)}")
            print(f"From email: {emailer.from_email}")
            print(f"To email: {emailer.to_email}")
            
        elif command == "help":
            print("Available commands:")
            print("  test    - Send test email")
            print("  nq1     - Send NQ1! trade email") 
            print("  latest  - Send latest trade from log")
            print("  config  - Check email configuration")
            print("  help    - Show this help")
            
    else:
        # Default: send the NQ1! trade email
        print("Sending NQ1! trade email...")
        result = send_nq1_trade_email()
        
        if result.get("success"):
            print("[SUCCESS] Email sent successfully!")
            print(f"Status: {result.get('status_code')}")
            print(f"Message: {result.get('message')}")
        else:
            print("[ERROR] Email failed!")
            print(f"Error: {result.get('error')}")
            
        print("\nIntegration instructions:")
        print(integrate_with_existing_pipeline())
